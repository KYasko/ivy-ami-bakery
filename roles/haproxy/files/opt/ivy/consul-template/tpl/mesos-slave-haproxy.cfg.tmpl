global
        # log messages are capped to alert - emerg messages are dropped to reduce log spam
        log /var/lib/haproxy/dev/log    local0 info alert
        log /var/lib/haproxy/dev/log    local1 notice alert
        chroot /var/lib/haproxy
        daemon
        user haproxy
        group haproxy

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL).
        # ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL

        # Recommended SSL ciphers
        ssl-default-bind-options no-sslv3 no-tls-tickets force-tlsv12
        ssl-default-bind-ciphers AES128+EECDH:AES128+EDH

defaults
        # Global log is only for restarts/etc and is external to the chroot
        #log     global
        # Log using the chroot's logger
        log /dev/log    local0 info alert
        log /dev/log    local1 notice alert
        mode    http
        retries 3
        option  dontlognull
        option  httpclose
        option  httplog
        option  redispatch

        # Uncomment this option to make HAProxy only log errors
        #option  dontlog-normal

        maxconn 10000
        timeout connect 5000
        timeout client  150000
        timeout server  150000

        compression algo gzip deflate
        compression type text/html text/plain text/javascript application/javascript application/json application/xml text/css

        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

# haproxy 1.6 config
listen stats
        bind :9090
        mode http
        stats enable
        stats uri /
        stats auth admin:admin

# Public Front Ends
frontend http-in
        bind *:80
        monitor-uri /ping

        # /etc/haproxy/blocked_ips.txt is generated by consul-template
        acl blocked_ips hdr_ip(X-Forwarded-For) -f /etc/haproxy/blocked_ips.txt
        http-request deny if blocked_ips

        # Capture information from clients or ELB
        # Order here matters, as Logstash splits in this order
        capture request header Host len 64
        capture request header X-Forwarded-For len 50
        capture request header Referer len 200
        capture request header User-Agent len 200
        capture request header x-ivy-service-name len 32

        # Capture information from response from backend
        capture response header X-TID len 32
        capture response header x-ivy-server len 32
        capture response header x-ivy-container len 32

        {{ range $index, $app := services -}}
          {{ range ls ( print "service/" $app.Name ) -}}
            {{ if .Key | regexMatch "^public(|\\..*)$" }}{{ $ruleName := print $app.Name "-" .Key "-aclrule" }}
              {{ if .Value | regexMatch "\\s" -}}
        acl {{$ruleName}} {{.Value}}
        use_backend {{$app.Name}}-cluster if {{$ruleName}}
              {{ else }}
        acl {{$ruleName}} hdr(host) {{.Value}}
        use_backend {{$app.Name}}-cluster if {{$ruleName}}
              {{ end }}
            {{- end }}
          {{- end }}
        {{- end }}

# Private Front Ends
{{ $default_domain := keyOrDefault "/proxy/default_domain" ".internal" }}
frontend private-in
        bind *:8080
        ##SSL_ENABLED##bind *:443 ssl crt /etc/ssl/certs/ivy-internal-ssl.pem
        monitor-uri /ping

        # Capture information from clients or ELB
        # Order here matters, as Logstash splits in this order
        capture request header Host len 64
        capture request header X-Forwarded-For len 50
        capture request header Referer len 200
        capture request header User-Agent len 200
        capture request header x-ivy-service-name len 32

        # Capture information from response from backend
        capture response header X-TID len 32
        capture response header x-ivy-server len 32
        capture response header x-ivy-container len 32

        {{ range $index, $app := services -}}
          {{ range ls ( print "service/" $app.Name ) -}}
            {{ if .Key | regexMatch "^private(|\\..*)$" }}{{ $ruleName := print $app.Name "-" .Key "-aclrule" }}
              {{ if .Value | regexMatch "\\s" -}}
        acl {{$ruleName}} {{.Value}}
        use_backend {{$app.Name}}-cluster if {{$ruleName}}
              {{- else }}
        acl {{$ruleName}} hdr(host) {{.Value}}
        use_backend {{$app.Name}}-cluster if {{$ruleName}}
              {{- end }}
            {{- end }}
          {{- end }}

        acl {{$app.Name}}-aclrule hdr(host) {{$app.Name}}{{$default_domain}}
        acl {{$app.Name}}-8080-aclrule hdr(host) {{$app.Name}}{{$default_domain}}:8080
        use_backend {{$app.Name}}-cluster if {{$app.Name}}-aclrule
        use_backend {{$app.Name}}-cluster if {{$app.Name}}-8080-aclrule

        acl {{$app.Name}}-internal-aclrule hdr(host) {{$app.Name}}.internal
        acl {{$app.Name}}-8080-internal-aclrule hdr(host) {{$app.Name}}.internal:8080
        use_backend {{$app.Name}}-cluster if {{$app.Name}}-internal-aclrule
        use_backend {{$app.Name}}-cluster if {{$app.Name}}-8080-internal-aclrule
        {{- end }}

{{ range $index, $app := services -}}
  {{ with $healthKey := (printf "service/%s/health" .Name ) -}}
    {{ $healthExists := keyExists $healthKey -}}
backend {{$app.Name}}-cluster
        {{ if $healthExists -}}
        option httpchk GET {{ key $healthKey }}
        {{ end -}}
        balance roundrobin
        option httpclose
        option forwardfor
        {{ range service $app.Name -}}
        server {{.Node}}-{{.Port}} {{.Address}}:{{.Port}}{{ if $healthExists }} check inter 20000 {{ end }}
        {{ end }}
  {{- end }}
{{ end }}
